epoll_destroy	evbase\epoll.c	/^void epoll_destroy(EL_P loop) {$/;"	f
epoll_dispatch	evbase\epoll.c	/^int epoll_dispatch(EL_P loop) {$/;"	f
epoll_init	evbase\epoll.c	/^void *epoll_init(EL_P loop) {$/;"	f
epoll_update	evbase\epoll.c	/^int epoll_update(EL_P loop, int fd, uint8_t oev, uint8_t nev) {$/;"	f
EEPOLL_P	evbase\epoll.h	/^typedef struct evt_epoll* EEPOLL_P;$/;"	t	typeref:struct:evt_epoll
EPOLL_INIT_NEVENT	evbase\epoll.h	12;"	d
EPOLL_MAX_NEVENT	evbase\epoll.h	13;"	d
EP_EVT	evbase\epoll.h	/^typedef struct epoll_event EP_EVT;$/;"	t	typeref:struct:epoll_event
EVBASE_EPOLL_H	evbase\epoll.h	2;"	d
event	evbase\epoll.h	/^    struct epoll_event *event;$/;"	m	struct:evt_epoll	typeref:struct:evt_epoll::epoll_event
evt_epoll	evbase\epoll.h	/^struct evt_epoll {$/;"	s
fd	evbase\epoll.h	/^    int fd;$/;"	m	struct:evt_epoll
feature	evbase\epoll.h	/^    int feature;$/;"	m	struct:evt_epoll
nevent	evbase\epoll.h	/^    int nevent;$/;"	m	struct:evt_epoll
evt_after_start	evbase\evt.c	/^void evt_after_start(EL_P loop, struct evt_after* ev) {$/;"	f
evt_after_stop	evbase\evt.c	/^void evt_after_stop(EL_P loop, struct evt_after* ev) {$/;"	f
evt_append_pending	evbase\evt.c	/^void evt_append_pending(EL_P loop, void *w) {$/;"	f
evt_before_start	evbase\evt.c	/^void evt_before_start(EL_P loop, struct evt_before* ev) {$/;"	f
evt_before_stop	evbase\evt.c	/^void evt_before_stop(EL_P loop, struct evt_before* ev) {$/;"	f
evt_execute_pending	evbase\evt.c	/^void evt_execute_pending(EL_P loop) {$/;"	f
evt_fd_change	evbase\evt.c	/^void evt_fd_change(EL_P loop, int fd) {$/;"	f
evt_fd_changes_update	evbase\evt.c	/^void evt_fd_changes_update(EL_P loop) {$/;"	f
evt_io_start	evbase\evt.c	/^void evt_io_start(EL_P loop, struct evt_io* w) {$/;"	f
evt_io_stop	evbase\evt.c	/^void evt_io_stop(EL_P loop, struct evt_io *ev) {$/;"	f
evt_list_add	evbase\evt.c	/^static void evt_list_add(EBL_P* head, EBL_P elm) {$/;"	f	file:
evt_list_add_tail	evbase\evt.c	/^static void evt_list_add_tail(EBL_P* head, EBL_P elm) {$/;"	f	file:
evt_list_del	evbase\evt.c	/^static void evt_list_del(EBL_P* head, EBL_P elm) {$/;"	f	file:
evt_loop_destroy	evbase\evt.c	/^int evt_loop_destroy(EL_P loop) {$/;"	f
evt_loop_init	evbase\evt.c	/^EL_P evt_loop_init() {$/;"	f
evt_loop_init_with_flag	evbase\evt.c	/^EL_P evt_loop_init_with_flag(int flag) {$/;"	f
evt_loop_quit	evbase\evt.c	/^int evt_loop_quit(EL_P loop) {$/;"	f
evt_loop_run	evbase\evt.c	/^int evt_loop_run(EL_P loop) {$/;"	f
evt_timer_start	evbase\evt.c	/^void evt_timer_start(EL_P loop, struct evt_timer* ev) {$/;"	f
evt_timer_stop	evbase\evt.c	/^void evt_timer_stop(EL_P loop, struct evt_timer* ev) {$/;"	f
EBL_P	evbase\evt.h	/^typedef struct evt_base_list* EBL_P;$/;"	t	typeref:struct:evt_base_list
EB_P	evbase\evt.h	/^typedef struct evt_base* EB_P;$/;"	t	typeref:struct:evt_base
EL_P	evbase\evt.h	/^typedef struct evt_loop* EL_P;$/;"	t	typeref:struct:evt_loop
EVBASE_EVT_H	evbase\evt.h	2;"	d
EVT_BASE	evbase\evt.h	18;"	d
EVT_BASE_LIST	evbase\evt.h	25;"	d
EVT_CALLBACK	evbase\evt.h	15;"	d
EVT_READ	evbase\evt.h	111;"	d
EVT_WRITE	evbase\evt.h	112;"	d
FDI_P	evbase\evt.h	/^typedef struct fd_info* FDI_P;$/;"	t	typeref:struct:fd_info
FD_FLAG_CHANGE	evbase\evt.h	114;"	d
LOOP_INIT_EVTSIZE	evbase\evt.h	128;"	d
LOOP_INIT_FDS	evbase\evt.h	126;"	d
LOOP_INIT_PENDSIZE	evbase\evt.h	127;"	d
LOOP_INIT_POLLUS	evbase\evt.h	130;"	d
LOOP_PRIORITY_MAX	evbase\evt.h	129;"	d
LOOP_STATU_INIT	evbase\evt.h	119;"	d
LOOP_STATU_PAUSE	evbase\evt.h	122;"	d
LOOP_STATU_QUITING	evbase\evt.h	123;"	d
LOOP_STATU_RUNNING	evbase\evt.h	121;"	d
LOOP_STATU_STARTED	evbase\evt.h	120;"	d
LOOP_STATU_STOP	evbase\evt.h	124;"	d
TIMERP_CMP	evbase\evt.h	96;"	d
empty_ev	evbase\evt.h	/^    struct evt_before *empty_ev;   \/* be used when stop a pending event *\/$/;"	m	struct:evt_loop	typeref:struct:evt_loop::evt_before
event	evbase\evt.h	/^    uint8_t event;$/;"	m	struct:evt_io
events	evbase\evt.h	/^    uint8_t events;$/;"	m	struct:fd_info
evt_after	evbase\evt.h	/^struct evt_after {$/;"	s
evt_after_init	evbase\evt.h	85;"	d
evt_afters_head	evbase\evt.h	/^    EBL_P evt_afters_head;$/;"	m	struct:evt_loop
evt_base	evbase\evt.h	/^struct evt_base {$/;"	s
evt_base_init	evbase\evt.h	63;"	d
evt_base_list	evbase\evt.h	/^struct evt_base_list {$/;"	s
evt_before	evbase\evt.h	/^struct evt_before {$/;"	s
evt_before_init	evbase\evt.h	84;"	d
evt_befores_head	evbase\evt.h	/^    EBL_P evt_befores_head;$/;"	m	struct:evt_loop
evt_io	evbase\evt.h	/^struct evt_io{$/;"	s
evt_io_init	evbase\evt.h	72;"	d
evt_loop	evbase\evt.h	/^struct evt_loop {$/;"	s
evt_timer	evbase\evt.h	/^struct evt_timer{$/;"	s
evt_timer_init	evbase\evt.h	78;"	d
fd	evbase\evt.h	/^    int fd;$/;"	m	struct:evt_io
fd	evbase\evt.h	/^    int fd;$/;"	m	struct:fd_info
fd_info	evbase\evt.h	/^struct fd_info {$/;"	s
fds	evbase\evt.h	/^    FDI_P fds;$/;"	m	struct:evt_loop
fds_mod	evbase\evt.h	/^    int *fds_mod;$/;"	m	struct:evt_loop
fds_mod_cnt	evbase\evt.h	/^    int fds_mod_cnt;$/;"	m	struct:evt_loop
fds_mod_size	evbase\evt.h	/^    int fds_mod_size;$/;"	m	struct:evt_loop
fds_size	evbase\evt.h	/^    int fds_size;$/;"	m	struct:evt_loop
flag	evbase\evt.h	/^    uint8_t flag;$/;"	m	struct:fd_info
head	evbase\evt.h	/^    EBL_P head;$/;"	m	struct:fd_info
heap_pos	evbase\evt.h	/^    int heap_pos;$/;"	m	struct:evt_timer
owner_thread	evbase\evt.h	/^    int owner_thread;$/;"	m	struct:evt_loop
pending	evbase\evt.h	/^    EB_P *pending[LOOP_PRIORITY_MAX];$/;"	m	struct:evt_loop
pending_cnt	evbase\evt.h	/^    int pending_cnt[LOOP_PRIORITY_MAX];$/;"	m	struct:evt_loop
pending_size	evbase\evt.h	/^    int pending_size[LOOP_PRIORITY_MAX];$/;"	m	struct:evt_loop
poll_destroy	evbase\evt.h	/^    void (*poll_destroy)(EL_P);$/;"	m	struct:evt_loop
poll_dispatch	evbase\evt.h	/^    int (*poll_dispatch)(EL_P);$/;"	m	struct:evt_loop
poll_feature	evbase\evt.h	/^    int poll_feature;$/;"	m	struct:evt_loop
poll_init	evbase\evt.h	/^    void *(*poll_init)(EL_P);$/;"	m	struct:evt_loop
poll_more_ptr	evbase\evt.h	/^    void *poll_more_ptr;$/;"	m	struct:evt_loop
poll_time_us	evbase\evt.h	/^    int64_t poll_time_us;      \/*in microsecond*\/$/;"	m	struct:evt_loop
poll_update	evbase\evt.h	/^    int (*poll_update)(EL_P, int, uint8_t, uint8_t);$/;"	m	struct:evt_loop
priority_max	evbase\evt.h	/^    uint8_t priority_max;   \/* 0 ~ max*\/$/;"	m	struct:evt_loop
repeat	evbase\evt.h	/^    int64_t repeat;$/;"	m	struct:evt_timer
revents	evbase\evt.h	/^    uint8_t revents;   \/* event return by poll*\/$/;"	m	struct:fd_info
status	evbase\evt.h	/^    uint8_t status;$/;"	m	struct:evt_loop
timer_heap	evbase\evt.h	/^    struct evt_timer** timer_heap;$/;"	m	struct:evt_loop	typeref:struct:evt_loop::evt_timer
timer_heap_cnt	evbase\evt.h	/^    int timer_heap_cnt;$/;"	m	struct:evt_loop
timer_heap_size	evbase\evt.h	/^    int timer_heap_size;$/;"	m	struct:evt_loop
timestamp	evbase\evt.h	/^    int64_t timestamp;$/;"	m	struct:evt_timer
default_log_if	evbase\log.c	/^struct log_if *default_log_if = &default_log_if_s;$/;"	v	typeref:struct:log_if
default_log_if_s	evbase\log.c	/^static struct log_if default_log_if_s = {$/;"	v	typeref:struct:log_if	file:
log_append	evbase\log.c	/^void log_append(struct log_if *logif, uint8_t level_index, const char *fmt, ...) {$/;"	f
log_console_fatal_cb	evbase\log.c	/^static void log_console_fatal_cb() {$/;"	f	file:
log_console_flush_cb	evbase\log.c	/^static void log_console_flush_cb() {$/;"	f	file:
log_console_output_cb	evbase\log.c	/^static void log_console_output_cb(const char *str, size_t size) {$/;"	f	file:
log_level_name	evbase\log.c	/^static const char* log_level_name[LOG_LEVELS] = {$/;"	v	file:
EVBASE_LOG_H	evbase\log.h	2;"	d
LOG_BUFSIZE	evbase\log.h	30;"	d
LOG_DEBUG	evbase\log.h	14;"	d
LOG_DEBUG_INDEX	evbase\log.h	22;"	d
LOG_ERROR	evbase\log.h	16;"	d
LOG_ERROR_INDEX	evbase\log.h	24;"	d
LOG_FATAL	evbase\log.h	17;"	d
LOG_FATAL_INDEX	evbase\log.h	25;"	d
LOG_INNER	evbase\log.h	12;"	d
LOG_INNER_INDEX	evbase\log.h	20;"	d
LOG_LEVELS	evbase\log.h	26;"	d
LOG_MASK	evbase\log.h	18;"	d
LOG_TRACE	evbase\log.h	13;"	d
LOG_TRACE_INDEX	evbase\log.h	21;"	d
LOG_WARN	evbase\log.h	15;"	d
LOG_WARN_INDEX	evbase\log.h	23;"	d
flush_cb	evbase\log.h	/^    void (*flush_cb)();$/;"	m	struct:log_if
get_default_logif_level_flag	evbase\log.h	63;"	d
get_logif_level_flag	evbase\log.h	45;"	d
level_cb	evbase\log.h	/^    void (*level_cb[LOG_LEVELS])();$/;"	m	struct:log_if
level_flag	evbase\log.h	/^    uint8_t level_flag;$/;"	m	struct:log_if
log_debug	evbase\log.h	71;"	d
log_error	evbase\log.h	73;"	d
log_fatal	evbase\log.h	74;"	d
log_if	evbase\log.h	/^struct log_if {$/;"	s
log_inner	evbase\log.h	69;"	d
log_level_append	evbase\log.h	40;"	d
log_trace	evbase\log.h	70;"	d
log_warn	evbase\log.h	72;"	d
logu_debug	evbase\log.h	53;"	d
logu_error	evbase\log.h	55;"	d
logu_fatal	evbase\log.h	56;"	d
logu_inner	evbase\log.h	51;"	d
logu_trace	evbase\log.h	52;"	d
logu_warn	evbase\log.h	54;"	d
output_cb	evbase\log.h	/^    void (*output_cb)(const char*, size_t);$/;"	m	struct:log_if
set_default_logif_flush_cb	evbase\log.h	66;"	d
set_default_logif_level	evbase\log.h	62;"	d
set_default_logif_level_cb	evbase\log.h	67;"	d
set_default_logif_level_flag	evbase\log.h	64;"	d
set_default_logif_output_cb	evbase\log.h	65;"	d
set_logif_flush_cb	evbase\log.h	48;"	d
set_logif_level	evbase\log.h	44;"	d
set_logif_level_cb	evbase\log.h	49;"	d
set_logif_level_flag	evbase\log.h	46;"	d
set_logif_output_cb	evbase\log.h	47;"	d
cr_thread_id	evbase\thread.c	/^__thread int cr_thread_id = 0;$/;"	v
cr_thread_name	evbase\thread.c	/^__thread const char* cr_thread_name = "unknow";$/;"	v
thread_id	evbase\thread.c	/^int thread_id() {$/;"	f
thread_name	evbase\thread.c	/^const char* thread_name() {$/;"	f
EVBASE_THREAD_H	evbase\thread.h	2;"	d
THREAD_ID	evbase\thread.h	13;"	d
cached_time	evbase\util.c	/^__thread int64_t cached_time = 0;$/;"	v
get_cached_time	evbase\util.c	/^int64_t get_cached_time() {$/;"	f
now_to_string	evbase\util.c	/^void now_to_string(char* buf, int len) {$/;"	f
time_to_string	evbase\util.c	/^void time_to_string(int64_t micro_seconds, char* buf, int len) {$/;"	f
update_cached_time	evbase\util.c	/^int64_t update_cached_time() {$/;"	f
CACHED_TIME	evbase\util.h	151;"	d
DEFINE_TEST	evbase\util.h	18;"	d
DEFINE_TEST	evbase\util.h	21;"	d
EVBASE_UTIL_H	evbase\util.h	2;"	d
HEAP_DELETE	evbase\util.h	126;"	d
HEAP_FIX_DOWN	evbase\util.h	91;"	d
HEAP_FIX_UP	evbase\util.h	79;"	d
HEAP_INIT	evbase\util.h	109;"	d
HEAP_POP	evbase\util.h	143;"	d
HEAP_PUSH	evbase\util.h	138;"	d
HEAP_SORT	evbase\util.h	115;"	d
HEAP_UPDATE_POS	evbase\util.h	76;"	d
LCHILD	evbase\util.h	67;"	d
LSHIFT	evbase\util.h	66;"	d
MICOR_SECOND	evbase\util.h	148;"	d
RCHILD	evbase\util.h	68;"	d
RSHIFT	evbase\util.h	65;"	d
SECOND	evbase\util.h	149;"	d
STRING	evbase\util.h	17;"	d
STRING	evbase\util.h	20;"	d
add_one	evbase\util.h	43;"	d
adjust_between	evbase\util.h	59;"	d
check_and_expand_array	evbase\util.h	46;"	d
fd_cloexec	evbase\util.h	72;"	d
fd_nonblock	evbase\util.h	73;"	d
init_array_noop	evbase\util.h	45;"	d
init_array_zero	evbase\util.h	44;"	d
max	evbase\util.h	58;"	d
min	evbase\util.h	57;"	d
mm_free	evbase\util.h	/^static inline void mm_free(void *p) {$/;"	f
mm_malloc	evbase\util.h	39;"	d
mm_realloc	evbase\util.h	/^static inline void *mm_realloc(void *p, int size) {$/;"	f
multi_two	evbase\util.h	42;"	d
buff_expand	evnet\tcpsv.c	/^int buff_expand(BUF_P buf, int size) {$/;"	f
buff_fd_read	evnet\tcpsv.c	/^int buff_fd_read(BUF_P buf, int fd) {$/;"	f
buff_fd_write	evnet\tcpsv.c	/^int buff_fd_write(BUF_P buf, int fd) {$/;"	f
buff_free	evnet\tcpsv.c	/^void buff_free(BUF_P buf) {$/;"	f
buff_init	evnet\tcpsv.c	/^void buff_init(BUF_P buf) {$/;"	f
buff_peak	evnet\tcpsv.c	/^const char* buff_peak(BUF_P buf) {$/;"	f
buff_read	evnet\tcpsv.c	/^int buff_read(BUF_P buf, int len, char* dst, int dstlen) {$/;"	f
buff_readall	evnet\tcpsv.c	/^int buff_readall(BUF_P buf, char* dst, int dstlen) {$/;"	f
buff_write	evnet\tcpsv.c	/^int buff_write(BUF_P buf, const char* str, int len) {$/;"	f
BUFF_INIT_SIZE	evnet\tcpsv.h	12;"	d
BUFF_LEFT	evnet\tcpsv.h	20;"	d
BUFF_REAL_LEFT	evnet\tcpsv.h	22;"	d
BUFF_SETRIND	evnet\tcpsv.h	24;"	d
BUFF_SETWIND	evnet\tcpsv.h	25;"	d
BUFF_SIZE	evnet\tcpsv.h	23;"	d
BUFF_USED	evnet\tcpsv.h	21;"	d
BUF_P	evnet\tcpsv.h	/^typedef struct buffer* BUF_P;$/;"	t	typeref:struct:buffer
EVNET_TCPCV_H	evnet\tcpsv.h	2;"	d
addr	evnet\tcpsv.h	/^    struct sockaddr_in addr;$/;"	m	struct:tcpsrv	typeref:struct:tcpsrv::sockaddr_in
buf	evnet\tcpsv.h	/^    char *buf;$/;"	m	struct:buffer
buffer	evnet\tcpsv.h	/^struct buffer {$/;"	s
fd	evnet\tcpsv.h	/^    int fd;$/;"	m	struct:tcpsrv
flag	evnet\tcpsv.h	/^    int flag;$/;"	m	struct:tcpsrv
loop_list	evnet\tcpsv.h	/^    struct ev_loop* loop_list;$/;"	m	struct:tcpsrv	typeref:struct:tcpsrv::ev_loop
loops	evnet\tcpsv.h	/^    int loops;$/;"	m	struct:tcpsrv
name	evnet\tcpsv.h	/^    char name[20];$/;"	m	struct:tcpsrv
on_accept_comp	evnet\tcpsv.h	/^    void (*on_accept_comp)();$/;"	m	struct:tcpsrv
on_read_comp	evnet\tcpsv.h	/^    void (*on_read_comp)();$/;"	m	struct:tcpclt
on_write_comp	evnet\tcpsv.h	/^    void (*on_write_comp)();$/;"	m	struct:tcpclt
r_ind	evnet\tcpsv.h	/^    int r_ind;$/;"	m	struct:buffer
size	evnet\tcpsv.h	/^    int size;$/;"	m	struct:buffer
tcpclt	evnet\tcpsv.h	/^struct tcpclt {$/;"	s
tcpsrv	evnet\tcpsv.h	/^struct tcpsrv {$/;"	s
w_ind	evnet\tcpsv.h	/^    int w_ind;$/;"	m	struct:buffer
after_cb1	main.c	/^void after_cb1(EL_P loop, struct evt_after *e) {$/;"	f
after_cb2	main.c	/^void after_cb2(EL_P loop, struct evt_after *e) {$/;"	f
before_cb1	main.c	/^void before_cb1(EL_P loop, struct evt_before *e) {$/;"	f
before_cb2	main.c	/^void before_cb2(EL_P loop, struct evt_before *e) {$/;"	f
e	main.c	/^struct evt_io e, e2;$/;"	v	typeref:struct:evt_io
e2	main.c	/^struct evt_io e, e2;$/;"	v	typeref:struct:
ea1	main.c	/^struct evt_after ea1, ea2;$/;"	v	typeref:struct:evt_after
ea2	main.c	/^struct evt_after ea1, ea2;$/;"	v	typeref:struct:
eb1	main.c	/^struct evt_before eb1, eb2;$/;"	v	typeref:struct:evt_before
eb2	main.c	/^struct evt_before eb1, eb2;$/;"	v	typeref:struct:
et1	main.c	/^struct evt_timer et1, et2, et3;$/;"	v	typeref:struct:evt_timer
et2	main.c	/^struct evt_timer et1, et2, et3;$/;"	v	typeref:struct:
et3	main.c	/^struct evt_timer et1, et2, et3;$/;"	v	typeref:struct:
io_cb	main.c	/^void io_cb(EL_P loop, struct evt_io* e) {$/;"	f
main	main.c	/^int main (int argc, char *argv[]) {$/;"	f
testdef	main.c	/^void testdef(){$/;"	f
timer_cb1	main.c	/^void timer_cb1(EL_P loop, struct evt_timer *e) {$/;"	f
timer_cb2	main.c	/^void timer_cb2(EL_P loop, struct evt_timer *e) {$/;"	f
timer_cb3	main.c	/^void timer_cb3(EL_P loop, struct evt_timer *e) {$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
